{"version":3,"sources":["Components/FormControls/FormControls.module.css","Components/ReduxForm/ReduxForm.module.css","Components/FormSubmit/FormSubmit.js","Components/FormControls/BtnInput.js","Components/Ethernet/BtnRadioIpForm/BtnRadioIpForm.js","Components/FormControls/Input.js","Components/Ethernet/IpForm/IpForm.js","Components/Ethernet/BtnRadioDnsForm/BtnRadioDnsForm.js","Components/Ethernet/DnsForm/DnsForm.js","Components/Ethernet/Ethernet.js","Components/FormControls/BtnInputCheckbox.js","Components/FormControls/Select.js","Components/Wireless/NetWorkNameForm/NetWorkNameForm.js","Components/Wireless/SecurityKeyForm/SecurityKeyForm.js","Components/Wireless/Ethernet/BtnRadioIpForm/BtnRadioIpForm.js","Components/FormControls/InputWs.js","Components/Wireless/Ethernet/IpForm/IpForm.js","Components/Wireless/Ethernet/BtnRadioDnsForm/BtnRadioDnsForm.js","Components/Wireless/Ethernet/DnsForm/DnsForm.js","Components/Wireless/Ethernet/Ethernet.js","Components/Wireless/Wireless.js","Components/ReduxForm/ReduxForm.js","Validation/Validation.js","Components/ReduxForm/ReduxFormContainer.js","Components/WrapperForm/WrapperForm.js","App.js","serviceWorker.js","redux/store.js","index.js","Components/FormSubmit/FormSubmit.module.css","Components/WrapperForm/WrapperForm.module.css"],"names":["module","exports","FormSubmit","props","submitting","pristine","reset","className","style","wrapperSubm","btnSave","type","disabled","btnCancel","onClick","btnInput","meta","input","error","touched","errorValue","BtnRadioIpForm","checkedAutoBtnIp","Field","name","component","value","checked","titleAuto","titleFollow","formInp","IpForm","miniForm","title","footnote","BtnRadioDnsForm","checkedAutoBtnDns","DnsForm","Ethernet","formValues","radioBtn","radioBtnDns","enableIpForm","enableDnsForm","btnInputCheckbox","checkboxInput","errorNetworkName","select","formSelect","NetworkNameForm","clearFields","btnReset","SecurityKeyForm","inputWs","errorValueWs","radioBtn1","radioBtnDns1","Wireless","checkedWifi","checkboxEnableWifi","checkedKey","checkboxEnableKey","enableWifi","enableKeySecurity","miniFormWS","wrapperWireless","titleEnableWifi","NetWorkNameForm","reduxForm","form","validate","values","errors","ipAddress","subnetMask","defaultGateway","preferredDns","alternativeDns","ipAddress1","subnetMask1","defaultGateway1","preferredDns1","alternativeDns1","selectedNetworkName","securityKey","match","arrIp","split","length","oct","isNaN","Number","arrWay","arrPrefDns","arrAltDns","handleSubmit","onSubmit","wrapperForm","wrapperTitle","wrapper","wrapperTitleWS","ReduxFormContainer","dispatch","console","log","JSON","stringify","ethernetSettings","followingAddress","preferredDnsServer","alternativeDnsServer","wirelessSettings","networkName","connect","state","getFormValues","WrapperForm","App","Boolean","window","location","hostname","rootReducer","combineReducers","formReducer","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5b16ef5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formInp\":\"FormControls_formInp__1uj2W\",\"errorValue\":\"FormControls_errorValue__3UDG9\",\"errorValueWs\":\"FormControls_errorValueWs__Bza-M\",\"formSelect\":\"FormControls_formSelect__2GwXl\",\"errorNetworkName\":\"FormControls_errorNetworkName__20w_O\",\"checkboxInput\":\"FormControls_checkboxInput__efxUl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"disabled\":\"ReduxForm_disabled__2w2dE\",\"miniForm\":\"ReduxForm_miniForm__3QYv8\",\"footnote\":\"ReduxForm_footnote__1ZKFy\",\"title\":\"ReduxForm_title__3BmBh\",\"formInp\":\"ReduxForm_formInp__B0-jw\",\"titleAuto\":\"ReduxForm_titleAuto__203PJ\",\"titleFollow\":\"ReduxForm_titleFollow__1MN0e\",\"wrapperTitleWS\":\"ReduxForm_wrapperTitleWS__20T-u\",\"wrapperForm\":\"ReduxForm_wrapperForm__3HQqI\",\"wrapperTitle\":\"ReduxForm_wrapperTitle__TH5Ei\",\"wrapper\":\"ReduxForm_wrapper__2fAw9\",\"wrapperWireless\":\"ReduxForm_wrapperWireless__3wEZT\",\"titleEnableWifi\":\"ReduxForm_titleEnableWifi__25whZ\",\"btnReset\":\"ReduxForm_btnReset__2pZkf\",\"miniFormWS\":\"ReduxForm_miniFormWS__rHRP8\"};","import React from 'react';\r\nimport style from '../FormSubmit/FormSubmit.module.css'\r\n\r\nconst FormSubmit = (props) => {\r\n\r\n    const {submitting, pristine, reset} = props;\r\n\r\n    return (\r\n        <div className={style.wrapperSubm}>\r\n            <button className={style.btnSave} type='submit' disabled={submitting}>Save</button>\r\n            <button className={style.btnCancel} type='button' disabled={pristine || submitting}\r\n                    onClick={reset}> Cancel\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormSubmit","import React from \"react\";\r\nimport style from \"./FormControls.module.css\";\r\n\r\n\r\nconst btnInput = (props) => {\r\n    const { meta} = props;\r\n    return (\r\n        <>\r\n            <input  {...props.input} {...props} />\r\n            {meta.error &&\r\n            meta.touched &&\r\n            <div className={style.errorValue}>\r\n                {meta.error}\r\n            </div>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default btnInput;","import React from \"react\";\r\nimport style from \"../../ReduxForm/ReduxForm.module.css\";\r\nimport {Field} from \"redux-form\";\r\nimport btnInput from \"../../FormControls/BtnInput\";\r\n\r\nconst BtnRadioIpForm = (props) => {\r\n\r\n    const {checkedAutoBtnIp} = props;\r\n\r\n    return (<>\r\n            <Field name=\"radioBtn\" component={btnInput} type=\"radio\" value=\"radioBtn1\" checked={!checkedAutoBtnIp}/>\r\n            <div className={style.titleAuto}>\r\n                <span>Obtain an IP address automatically (DHCP/BootP)</span>\r\n            </div>\r\n            <div>\r\n                <Field name=\"radioBtn\" component={btnInput} type=\"radio\" value=\"radioBtn2\" checked={checkedAutoBtnIp}/>\r\n                <div className={style.titleFollow}>\r\n                    <span>Use the following IP address:</span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default (BtnRadioIpForm)","import React from \"react\";\r\nimport style from \"./FormControls.module.css\";\r\n\r\n\r\nconst input = (props) => {\r\n\r\n    const {meta} = props;\r\n\r\n    return (\r\n        <>\r\n            <input className={style.formInp} {...props.input} {...props}  />\r\n            {meta.error && meta.touched &&\r\n            <div className={style.errorValue}>\r\n                {meta.error}\r\n            </div>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default input;","import React from \"react\";\r\nimport style from \"../../ReduxForm/ReduxForm.module.css\";\r\nimport {Field} from \"redux-form\";\r\nimport input from \"../../FormControls/Input\";\r\n\r\n\r\nconst IpForm = (props) => {\r\n\r\n    return (<>\r\n            <div className={style.miniForm}>\r\n                <span className={style.title}>IP address: </span><span className={style.footnote}>*</span>\r\n                <Field name=\"ipAddress\" component={input} type=\"text\"/>\r\n            </div>\r\n            <div className={style.miniForm}>\r\n                <span className={style.title}>Subnet Mask:</span> <span className={style.footnote}>*</span>\r\n                <Field name=\"subnetMask\" component={input} type=\"text\"/>\r\n            </div>\r\n            <div className={style.miniForm}>\r\n                <span className={style.title}>Default Gateway:</span>\r\n                <Field name=\"defaultGateway\" component={input} type=\"text\"/>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default (IpForm)","import React from \"react\";\r\nimport style from \"../../ReduxForm/ReduxForm.module.css\";\r\nimport {Field} from \"redux-form\";\r\nimport btnInput from \"../../FormControls/BtnInput\";\r\n\r\n\r\nconst BtnRadioDnsForm = (props) => {\r\n\r\n    const {checkedAutoBtnDns} = props;\r\n\r\n    return (<>\r\n            <Field name=\"radioBtnDns\" component={btnInput} type=\"radio\" value=\"radioBtn3\" checked={!checkedAutoBtnDns}/>\r\n            <div className={style.titleAuto}>\r\n                <span>Obtain DNS server address automatically</span>\r\n            </div>\r\n            <div>\r\n                <Field name=\"radioBtnDns\" component={btnInput} type=\"radio\" value=\"radioBtn4\"\r\n                       checked={checkedAutoBtnDns}/>\r\n                <div className={style.titleFollow}>\r\n                    <span>Use the following DS server address:</span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default (BtnRadioDnsForm)","import React from \"react\";\r\nimport style from \"../../ReduxForm/ReduxForm.module.css\";\r\nimport {Field} from \"redux-form\";\r\nimport input from \"../../FormControls/Input\";\r\n\r\n\r\nconst DnsForm = (props) => {\r\n\r\n    return (<>\r\n            <div className={style.miniForm}>\r\n                <span className={style.title}>Preferred DNS server:</span><span className={style.footnote}>*</span>\r\n                <Field name=\"preferredDns\" component={input} type=\"text\"/>\r\n            </div>\r\n            <div className={style.miniForm}>\r\n                <span className={style.title}>Alternative DNS server:</span>\r\n                <Field name=\"alternativeDns\" component={input} type=\"text\"/>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default (DnsForm)","import React from \"react\";\r\nimport BtnRadioIpForm from \"./BtnRadioIpForm/BtnRadioIpForm\";\r\nimport IpForm from \"./IpForm/IpForm\";\r\nimport BtnRadioDnsForm from \"./BtnRadioDnsForm/BtnRadioDnsForm\";\r\nimport DnsForm from \"./DnsForm/DnsForm\";\r\nimport style from \"../ReduxForm/ReduxForm.module.css\";\r\n\r\n\r\nconst Ethernet = (props) => {\r\n\r\n    const {formValues} = props;\r\n\r\n    let checkedAutoBtnIp = formValues.radioBtn === \"radioBtn2\";\r\n\r\n    let checkedAutoBtnDns = formValues.radioBtnDns === \"radioBtn4\";\r\n\r\n    let enableIpForm = !checkedAutoBtnIp ? `${style.disabled}` : \"\";\r\n\r\n    let enableDnsForm = !checkedAutoBtnDns ? `${style.disabled}` : \"\";\r\n\r\n    return (<>\r\n            <BtnRadioIpForm checkedAutoBtnIp={checkedAutoBtnIp} {...props}/>\r\n            <div className={enableIpForm}>\r\n                <IpForm/>\r\n            </div>\r\n            <BtnRadioDnsForm checkedAutoBtnDns={checkedAutoBtnDns} {...props}/>\r\n            <div className={enableDnsForm}>\r\n                <DnsForm/>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default (Ethernet)","import React from \"react\";\r\nimport style from \"./FormControls.module.css\";\r\n\r\n\r\nconst btnInputCheckbox = (props) => {\r\n    const { meta} = props;\r\n    return (\r\n        <>\r\n            <input className={style.checkboxInput}  {...props.input}{...props} />\r\n            {meta.error &&\r\n            meta.touched &&\r\n            <div className={style.errorNetworkName}>\r\n                {meta.error}\r\n            </div>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default btnInputCheckbox;","import React from \"react\";\r\nimport style from \"./FormControls.module.css\";\r\n\r\n\r\nconst select = (props) => {\r\n    const { meta} = props;\r\n    return (\r\n        <>\r\n            <select className={style.formSelect} {...props.input} {...props}  />\r\n            {meta.error &&\r\n            meta.touched &&\r\n            <div className={style.errorNetworkName}>\r\n                {meta.error}\r\n            </div>}\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default select;","import React from \"react\";\r\nimport style from \"../../ReduxForm/ReduxForm.module.css\";\r\nimport {Field} from \"redux-form\";\r\nimport select from \"../../FormControls/Select\";\r\n\r\n\r\nconst NetworkNameForm = (props) => {\r\n\r\n    const {clearFields} = props;\r\n\r\n    const clear = () => {\r\n        clearFields(false, false, \"selectedNetworkName\");\r\n    };\r\n\r\n    return (\r\n        <div className={style.miniForm}>\r\n            <span className={style.title}>Wireless Network Name: </span>\r\n            <span className={style.footnote}>*</span>\r\n            <div>\r\n                <Field name=\"selectedNetworkName\" component={select}>\r\n                    <option name=\"Please select\">Please select</option>\r\n                    <option name=\"Network 1\">Network 1</option>\r\n                    <option name=\"Network 2\">Network 2</option>\r\n                    <option name=\"Network 3\">Network 3</option>\r\n                </Field>\r\n            </div>\r\n            <button className={style.btnReset} type=\"button\" name=\"resetButton\" onClick={clear} value=\"resetBtn\">\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default (NetworkNameForm)","import React from \"react\";\r\nimport style from \"../../ReduxForm/ReduxForm.module.css\";\r\nimport {Field} from \"redux-form\";\r\nimport input from \"../../FormControls/Input\";\r\n\r\n\r\nconst SecurityKeyForm = (props) => {\r\n\r\n    return (<>\r\n            <span className={style.title}>Security key: </span><span className={style.footnote}>*</span>\r\n            <Field name=\"securityKey\" component={input} type=\"text\"/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default (SecurityKeyForm)","import React from \"react\";\r\nimport style from \"../../../ReduxForm/ReduxForm.module.css\";\r\nimport {Field} from \"redux-form\";\r\nimport btnInput from \"../../../FormControls/BtnInput\";\r\n\r\nconst BtnRadioIpForm = (props) => {\r\n    const {checkedAutoBtnIp} = props;\r\n    return (<>\r\n            <Field name=\"radioBtn1\" component={btnInput} type=\"radio\" value=\"radioBtn5\" checked={!checkedAutoBtnIp}/>\r\n            <div className={style.titleAuto}>\r\n                <span>Obtain an IP address automatically (DHCP/BootP)</span>\r\n            </div>\r\n            <div>\r\n                <Field name=\"radioBtn1\" component={btnInput} type=\"radio\" value=\"radioBtn6\" checked={checkedAutoBtnIp}/>\r\n                <div className={style.titleFollow}>\r\n                    <span>Use the following IP address:</span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default (BtnRadioIpForm)","import React from \"react\";\r\nimport style from \"./FormControls.module.css\";\r\n\r\n\r\nconst inputWs = (props) => {\r\n    const { meta} = props;\r\n\r\n    return (\r\n        <>\r\n            <input className={style.formInp} {...props.input} {...props} />\r\n            {meta.error &&\r\n            meta.touched &&\r\n            <div className={style.errorValueWs}>\r\n                {meta.error}\r\n            </div>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default inputWs;","import React from \"react\";\r\nimport style from \"../../../ReduxForm/ReduxForm.module.css\";\r\nimport {Field} from \"redux-form\";\r\nimport inputWs from \"../../../FormControls/InputWs\";\r\n\r\n\r\nconst IpForm = (props) => {\r\n\r\n    return (<>\r\n            <div className={style.miniForm}>\r\n                <span className={style.title}>IP address: </span><span className={style.footnote}>*</span>\r\n                <Field name=\"ipAddress1\" component={inputWs} type=\"text\"/>\r\n            </div>\r\n            <div className={style.miniForm}>\r\n                <span className={style.title}>Subnet Mask:</span> <span className={style.footnote}>*</span>\r\n                <Field name=\"subnetMask1\" component={inputWs} type=\"text\"/>\r\n            </div>\r\n            <div className={style.miniForm}>\r\n                <span className={style.title}>Default Gateway:</span>\r\n                <Field name=\"defaultGateway1\" component={inputWs} type=\"text\"/>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default (IpForm)","import React from \"react\";\r\nimport style from \"../../../ReduxForm/ReduxForm.module.css\";\r\nimport {Field} from \"redux-form\";\r\nimport btnInput from \"../../../FormControls/BtnInput\";\r\n\r\n\r\nconst BtnRadioDnsForm = (props) => {\r\n\r\n    const {checkedAutoBtnDns} = props;\r\n\r\n    return (<>\r\n            <Field name=\"radioBtnDns1\" component={btnInput} type=\"radio\" value=\"radioBtn7\"\r\n                   checked={!checkedAutoBtnDns}/>\r\n            <div className={style.titleAuto}>\r\n                <span>Obtain DNS server address automatically</span>\r\n            </div>\r\n            <div>\r\n                <Field name=\"radioBtnDns1\" component={btnInput} type=\"radio\" value=\"radioBtn8\"\r\n                       checked={checkedAutoBtnDns}/>\r\n                <div className={style.titleFollow}>\r\n                    <span>Use the following DS server address:</span>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default (BtnRadioDnsForm)","import React from \"react\";\r\nimport style from \"../../../ReduxForm/ReduxForm.module.css\";\r\nimport {Field} from \"redux-form\";\r\nimport inputWs from \"../../../FormControls/InputWs\";\r\n\r\n\r\nconst DnsForm = (props) => {\r\n\r\n    return (<>\r\n            <div className={style.miniForm}>\r\n                <span className={style.title}>Preferred DNS server:</span><span className={style.footnote}>*</span>\r\n                <Field name=\"preferredDns1\" component={inputWs} type=\"text\"/>\r\n            </div>\r\n            <div className={style.miniForm}>\r\n                <span className={style.title}>Alternative DNS server:</span>\r\n                <Field name=\"alternativeDns1\" component={inputWs} type=\"text\"/>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default (DnsForm)","import React from \"react\";\r\nimport BtnRadioIpForm from \"./BtnRadioIpForm/BtnRadioIpForm\";\r\nimport IpForm from \"./IpForm/IpForm\";\r\nimport BtnRadioDnsForm from \"./BtnRadioDnsForm/BtnRadioDnsForm\";\r\nimport DnsForm from \"./DnsForm/DnsForm\";\r\nimport style from \"../../ReduxForm/ReduxForm.module.css\";\r\n\r\n\r\nconst Ethernet = (props) => {\r\n\r\n    const {formValues} = props;\r\n\r\n    let checkedAutoBtnIp = formValues.radioBtn1 === \"radioBtn6\";\r\n\r\n    let checkedAutoBtnDns = formValues.radioBtnDns1 === \"radioBtn8\";\r\n\r\n    let enableIpForm = !checkedAutoBtnIp ? `${style.disabled}` : \"\";\r\n\r\n    let enableDnsForm = !checkedAutoBtnDns ? `${style.disabled}` : \"\";\r\n\r\n    return (<>\r\n            <BtnRadioIpForm checkedAutoBtnIp={checkedAutoBtnIp} {...props}/>\r\n            <div className={enableIpForm}>\r\n                <IpForm/>\r\n            </div>\r\n            <BtnRadioDnsForm checkedAutoBtnDns={checkedAutoBtnDns} {...props}/>\r\n            <div className={enableDnsForm}>\r\n                <DnsForm/>\r\n            </div>\r\n        </>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default (Ethernet)","import React from \"react\";\r\nimport style from \"../ReduxForm/ReduxForm.module.css\";\r\nimport btnInputCheckbox from \"../FormControls/BtnInputCheckbox\";\r\nimport {Field} from \"redux-form\";\r\nimport NetWorkNameForm from \"./NetWorkNameForm/NetWorkNameForm\";\r\nimport SecurityKeyForm from \"./SecurityKeyForm/SecurityKeyForm\";\r\nimport Ethernet from \"./Ethernet/Ethernet\";\r\n\r\n\r\nconst Wireless = (props) => {\r\n\r\n    const {formValues} = props;\r\n\r\n    let checkedWifi = formValues.checkboxEnableWifi === true;\r\n\r\n    let checkedKey = formValues.checkboxEnableKey === true;\r\n\r\n    let enableWifi = !checkedWifi ? `${style.disabled}` : \"\";\r\n\r\n    let enableKeySecurity = !checkedKey ? `${style.miniFormWS} ${style.disabled}` : `${style.miniFormWS}`;\r\n\r\n    return (<div className={style.wrapperWireless}>\r\n            <Field name=\"checkboxEnableWifi\" component={btnInputCheckbox} type=\"checkbox\"\r\n                   checked={checkedWifi} value=\"checkedBtn\"/>\r\n            <span className={style.titleEnableWifi}>Enable wifi:</span>\r\n            <div className={enableWifi}>\r\n                <NetWorkNameForm {...props}/>\r\n                <div>\r\n                    <Field name=\"checkboxEnableKey\" component={btnInputCheckbox} type=\"checkbox\"\r\n                           checked={checkedKey} value=\"checkedBtnKey\"/>\r\n                    <span className={style.titleEnableWifi}>Enable Wireless Security :</span>\r\n                    <div className={enableKeySecurity}>\r\n                        <SecurityKeyForm/>\r\n                    </div>\r\n                    <Ethernet {...props}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default (Wireless)","import React from \"react\";\r\nimport style from \"../ReduxForm/ReduxForm.module.css\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {validate} from \"../../Validation/Validation\";\r\nimport FormSubmit from \"../FormSubmit/FormSubmit\";\r\nimport Ethernet from \"../Ethernet/Ethernet\";\r\nimport Wireless from \"../Wireless/Wireless\";\r\n\r\n\r\nconst ReduxForm = (props) => {\r\n\r\n    const {handleSubmit} = props;\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={style.wrapperForm}>\r\n                <div className={style.wrapperTitle}>\r\n                    <span>Ethernet Settings</span>\r\n                </div>\r\n\r\n                <div className={style.wrapper}>\r\n                    <Ethernet {...props} />\r\n                </div>\r\n\r\n                <div className={style.wrapperTitleWS}>\r\n                    <span>Wireless Settings</span>\r\n                </div>\r\n\r\n                <Wireless {...props}/>\r\n\r\n                <FormSubmit {...props}/>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n\r\nexport default reduxForm({\r\n    form: \"fillingForm\",\r\n    validate\r\n})(ReduxForm);","export const validate = (values) => {\r\n\r\n    const errors = {};\r\n\r\n    if (values.radioBtn === \"radioBtn1\") {\r\n        values.ipAddress = \"\";\r\n        values.subnetMask = \"\";\r\n        values.defaultGateway = \"\"\r\n    }\r\n\r\n    if (values.radioBtnDns === \"radioBtn3\") {\r\n        values.preferredDns = \"\";\r\n        values.alternativeDns = \"\";\r\n    }\r\n\r\n    if (values.radioBtn1 === \"radioBtn5\") {\r\n        values.ipAddress1 = \"\";\r\n        values.subnetMask1 = \"\";\r\n        values.defaultGateway1 = \"\"\r\n    }\r\n\r\n    if (values.radioBtnDns1 === \"radioBtn7\") {\r\n        values.preferredDns1 = \"\";\r\n        values.alternativeDns1 = \"\";\r\n    }\r\n    if (values.checkboxEnableWifi === false) {\r\n        values.selectedNetworkName = \"\";\r\n    }\r\n    if (values.checkboxEnableKey === false) {\r\n        values.securityKey = \"\"\r\n    }\r\n\r\n\r\n    if (values.radioBtn === \"radioBtn2\") {\r\n        if (!values.subnetMask) {\r\n            errors.subnetMask = \"Required!\";\r\n        } else if (!values.subnetMask.match(/^(((255\\.){3}(255|254|252|248|240|224|192|128|0+))|((255\\.){2}(255|254|252|248|240|224|192|128|0+)\\.0)|((255\\.)(255|254|252|248|240|224|192|128|0+)(\\.0+){2})|((255|254|252|248|240|224|192|128|0+)(\\.0+){3}))$/)) {\r\n            errors.subnetMask = \"Invalid Subnet Mask!\";\r\n        }\r\n\r\n        if (!values.ipAddress) {\r\n            errors.ipAddress = \"Required!\";\r\n        } else if (values.ipAddress) {\r\n            let arrIp = values.ipAddress.split(\".\");\r\n            if (arrIp.length !== 4) {\r\n                errors.ipAddress = \"Invalid IP address!\"\r\n            }\r\n            for (let oct of arrIp) {\r\n                if (isNaN(oct) || Number(oct) < 0 || Number(oct) > 255) {\r\n                    errors.ipAddress = \"Invalid IP address!\";\r\n                }\r\n            }\r\n        }\r\n        if (values.defaultGateway) {\r\n            let arrWay = values.defaultGateway.split(\".\");\r\n            if (arrWay.length !== 4) {\r\n                errors.defaultGateway = \"Invalid Way!\"\r\n            }\r\n            for (let oct of arrWay) {\r\n                if (isNaN(oct) || Number(oct) < 0 || Number(oct) > 255) {\r\n                    errors.defaultGateway = \"Invalid Way!\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (values.radioBtnDns === \"radioBtn4\") {\r\n        if (!values.preferredDns) {\r\n            errors.preferredDns = \"Required!\";\r\n        } else if (values.preferredDns) {\r\n            let arrPrefDns = values.preferredDns.split(\".\");\r\n            if (arrPrefDns.length !== 4) {\r\n                errors.preferredDns = \"Invalid DNS address!\"\r\n            }\r\n            for (let oct of arrPrefDns) {\r\n                if (isNaN(oct) || Number(oct) < 0 || Number(oct) > 255) {\r\n                    errors.preferredDns = \"Invalid DNS address!\";\r\n                }\r\n            }\r\n        }\r\n        if (values.alternativeDns) {\r\n            let arrAltDns = values.alternativeDns.split(\".\");\r\n            if (arrAltDns.length !== 4) {\r\n                errors.alternativeDns = \"Invalid DNS address!\"\r\n            }\r\n            for (let oct of arrAltDns) {\r\n                if (isNaN(oct) || Number(oct) < 0 || Number(oct) > 255) {\r\n                    errors.alternativeDns = \"Invalid DNS address!\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (values.checkboxEnableWifi === true) {\r\n        if (!values.selectedNetworkName || values.selectedNetworkName === \"Please select\") {\r\n            errors.selectedNetworkName = \"Required!\";\r\n        }\r\n    }\r\n    if (values.checkboxEnableKey === true) {\r\n        if (!values.securityKey) {\r\n            errors.securityKey = \"Required!\";\r\n        } else if (values.securityKey.length < 8) {\r\n            errors.securityKey = \"Key must be at least 8 symbols!\";\r\n        }\r\n    }\r\n\r\n    if (values.radioBtn1 === \"radioBtn6\") {\r\n        if (!values.subnetMask1) {\r\n            errors.subnetMask1 = \"Required!\";\r\n        } else if (!values.subnetMask1.match(/^(((255\\.){3}(255|254|252|248|240|224|192|128|0+))|((255\\.){2}(255|254|252|248|240|224|192|128|0+)\\.0)|((255\\.)(255|254|252|248|240|224|192|128|0+)(\\.0+){2})|((255|254|252|248|240|224|192|128|0+)(\\.0+){3}))$/)) {\r\n            errors.subnetMask1 = \"Invalid Subnet Mask!\";\r\n        }\r\n\r\n        if (!values.ipAddress1) {\r\n            errors.ipAddress1 = \"Required!\";\r\n        } else if (values.ipAddress1) {\r\n            let arrIp = values.ipAddress1.split(\".\");\r\n            if (arrIp.length !== 4) {\r\n                errors.ipAddress1 = \"Invalid IP address!\"\r\n            }\r\n            for (let oct of arrIp) {\r\n                if (isNaN(oct) || Number(oct) < 0 || Number(oct) > 255) {\r\n                    errors.ipAddress1 = \"Invalid IP address!\";\r\n                }\r\n            }\r\n        }\r\n        if (values.defaultGateway1) {\r\n            let arrWay = values.defaultGateway1.split(\".\");\r\n            if (arrWay.length !== 4) {\r\n                errors.defaultGateway1 = \"Invalid Way!\"\r\n            }\r\n            for (let oct of arrWay) {\r\n                if (isNaN(oct) || Number(oct) < 0 || Number(oct) > 255) {\r\n                    errors.defaultGateway1 = \"Invalid Way!\";\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    if (values.radioBtnDns1 === \"radioBtn8\") {\r\n        if (!values.preferredDns1) {\r\n            errors.preferredDns1 = \"Required!\";\r\n        } else if (values.preferredDns1) {\r\n            let arrPrefDns = values.preferredDns1.split(\".\");\r\n            if (arrPrefDns.length !== 4) {\r\n                errors.preferredDns1 = \"Invalid DNS address!\"\r\n            }\r\n            for (let oct of arrPrefDns) {\r\n                if (isNaN(oct) || Number(oct) < 0 || Number(oct) > 255) {\r\n                    errors.preferredDns1 = \"Invalid DNS address!\";\r\n                }\r\n            }\r\n        }\r\n        if (values.alternativeDns1) {\r\n            let arrAltDns = values.alternativeDns1.split(\".\");\r\n            if (arrAltDns.length !== 4) {\r\n                errors.alternativeDns1 = \"Invalid DNS address!\"\r\n            }\r\n            for (let oct of arrAltDns) {\r\n                if (isNaN(oct) || Number(oct) < 0 || Number(oct) > 255) {\r\n                    errors.alternativeDns1 = \"Invalid DNS address!\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return errors;\r\n\r\n};\r\n","import React from \"react\";\r\nimport ReduxForm from \"./ReduxForm\";\r\nimport {getFormValues, reset} from \"redux-form\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet ReduxFormContainer = (props) => {\r\n\r\n    const submit = (values, dispatch) => {\r\n        console.log(JSON.stringify({\r\n            ethernetSettings: {\r\n                followingAddress: {\r\n                    ipAddress: values.ipAddress,\r\n                    subnetMask: values.subnetMask,\r\n                    defaultGateway: values.defaultGateway,\r\n                    preferredDnsServer: values.preferredDns,\r\n                    alternativeDnsServer: values.alternativeDns,\r\n                }\r\n            },\r\n            wirelessSettings: {\r\n                networkName: values.selectedNetworkName,\r\n                securityKey: values.securityKey,\r\n                followingAddress: {\r\n                    ipAddress: values.ipAddress1,\r\n                    subnetMask: values.subnetMask1,\r\n                    defaultGateway: values.defaultGateway1,\r\n                    preferredDnsServer: values.preferredDns1,\r\n                    alternativeDnsServer: values.alternativeDns1,\r\n                }\r\n            }\r\n        }));\r\n        dispatch(reset(\"fillingForm\"));\r\n    };\r\n    return <ReduxForm onSubmit={submit} formValues={props.formValues} {...props}/>\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n    const formValues = getFormValues(\"fillingForm\")(state) || {};\r\n    return {\r\n        formValues,\r\n    };\r\n}\r\n\r\nReduxFormContainer = connect(\r\n    mapStateToProps,\r\n    null\r\n)(ReduxFormContainer);\r\n\r\nexport default (ReduxFormContainer);","import React from \"react\";\r\nimport style from \"./WrapperForm.module.css\";\r\nimport ReduxFormContainer from \"../ReduxForm/ReduxFormContainer\";\r\n\r\n\r\nconst WrapperForm = () => {\r\n    return (\r\n        <div className={style.wrapper}>\r\n            <ReduxFormContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WrapperForm\r\n\r\n","import React from \"react\";\nimport \"./App.css\";\nimport WrapperForm from \"./Components/WrapperForm/WrapperForm\";\n\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <WrapperForm/>\n        </div>\n    );\n};\n\nexport default (App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\n\r\nconst rootReducer = combineReducers({\r\n    form: formReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n\n\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnSave\":\"FormSubmit_btnSave__1q9lR\",\"btnCancel\":\"FormSubmit_btnCancel__14NM0\",\"wrapperSubm\":\"FormSubmit_wrapperSubm__NWsJm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"WrapperForm_wrapper__2bP6l\"};"],"sourceRoot":""}